package javaapplicationcompiler;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author muhammadammar
 */
class Token
        {
    String ClassPart;
    String ValuePart;
    int lineNumber;
    
    Token(String classPart,String valuePart,int lineNumber )
    {
        this.ClassPart=classPart;
        this.ValuePart=valuePart;
        this.lineNumber=lineNumber;
    }
    
}
class LexicalAnalyzer
{
    String [] WordBreakedArray;
     String [] KeyWordArray;//list of all keywords
      String [] OperatorArray;//genral for all
       String [] PunctuatorArray={";",",","{","}","(",")","[","]"};//genral for all
       
    LexicalAnalyzer(String [] File)
    {
        this.WordBreakedArray= File;
        
    }
    int i=0,j=0;
    while(WordBreakedArray[i]==PunctuatorArray[j]){
    
}
   void isKeyWord(){}
   void isOperator(){}
   void ispunctuator(){}
   void isIdentifer(){}
   void isDouble(){}
   void isString(){}
   void isbool(){}   
}

public class JavaApplicationCompiler {
    

 static String readFile() throws IOException
    {
           String  data = new String(Files.readAllBytes(Paths.get("/home/muhammadammar/Documents/test.txt")));
       return data;
    } 
    
   static boolean spacebreaker(char ch ){
       if(ch ==' '){
        return true ;       
}else return false;
    } 
   static boolean punctuatorbreaker(char ch){
       String [] punctuators={";",",","{","}","(",")","[","]"};
 
      
     for(int i =0 ;i<punctuators.length; i ++ )
     {
         if(punctuators[i].equals(String.valueOf(ch) ))
             return true;
                 
                     
     }
     return false;
   }
      static boolean operatorbreaker(char ch){
       String [] operators={"+","-","*","/","%","<",">","&&","||","!","="};
 
      
     for(int i =0 ;i<operators.length; i ++ )
     {
         if(operators[i].equals(String.valueOf(ch) ))
             return true;
                 
                     
     }
     return false;
   }
      static boolean linechangebreaker(char ch ){
       if(ch == '\n'){
        return true ;       
}else return false;
    }
      
    
            static boolean commentbreaker(char ch){
       String  comment="//";
       String comment1="/";
     if(comment1==(String.valueOf(ch))){
      if(comment==(String.valueOf(ch))){
             return true;
                 
         }    }
     
     return false;
   }
   

  
 
    public static void main(String[] args) throws IOException {
     
     
      ArrayList <String> allChars = new ArrayList();
        
      
String fileInput = readFile();
      
      
      String temp = "";
      
      for(int i =0;i<fileInput.length();i++){
          
           if( commentbreaker(fileInput.charAt(i)) == true)
               {
                while(fileInput.charAt(i)!='\n'){
                    i++;
                }
                   
                }
        
       
          
      if( spacebreaker(fileInput.charAt(i)) == true)
               {
                if(temp.length()!=0){
                    allChars.add(temp);
                    temp="";
                   
                }
        }
      if(operatorbreaker(fileInput.charAt(i))==true)
      {
              if(temp.length()!=0){
                    allChars.add(temp);
                    temp="";
                  }
      }
      
      if(punctuatorbreaker(fileInput.charAt(i))==true)
      {
              if(temp.length()!=0){
                    allChars.add(temp);
                    temp="";
                  }
      }
      
           
                  if(linechangebreaker(fileInput.charAt(i))==true)
      {
              if(temp.length()!=0){
                    allChars.add(temp);
                    temp="";
                  }
      }
          
                  
   else if(fileInput.charAt(i)=='.')
              {
                  if(isNumeric(temp)== true) //temphas numbers 
                  {
                    temp+= fileInput.charAt(i);
                    
                      };
                      i++;
                      while(Character.isDigit(fileInput.charAt(i))== true)
                  {
                      temp+= fileInput.charAt(i);
                      i++;
                  }  allChars.add(temp);
                    temp="";
                  }                  
                          
              
               
      else{
                
            temp+=fileInput.charAt(i);
            }
    
      }
            
             for(String x : allChars){
                 
      System.out.println(x);
      }
               
               
              
           
   
        
      }

    private static boolean isNumeric(String temp) {
    try {  

        

String someString = temp;
boolean isNumeric = someString.chars().allMatch( Character::isDigit );
        //Integer.parseInt(temp);  
    return true;
  }
    catch(NumberFormatException e){  
    return false;  
  }  
    }
  
      }
    
}

